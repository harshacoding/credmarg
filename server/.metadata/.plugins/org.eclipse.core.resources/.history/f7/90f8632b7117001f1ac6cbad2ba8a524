package server.Demo.Controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import server.Demo.Model.EmailLog;
import server.Demo.Model.EmailRequest;
import server.Demo.Model.Vendor;
import server.Demo.Repository.EmailLogRepository;
import server.Demo.Service.EmailLogService;
import server.Demo.Service.EmailService;
import server.Demo.Service.VendorService;

@RestController
@RequestMapping("/admin/vendors")
public class VendorController {
	@Autowired
    private VendorService vendorService;
	
	 @Autowired
	    private EmailService emailService;
	 @Autowired
	    private EmailLogService emailLogService;

	    @Autowired
	    private EmailLogRepository emailLogRepository;

	 @PostMapping("/data")
    public Vendor createVendor(@RequestBody Vendor vendor) {
        return vendorService.saveVendor(vendor);
    }

    @GetMapping("/data")
    public List<Vendor> getAllVendors() {
        return vendorService.getAllVendors();
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<Vendor> getVendorById(@PathVariable Long id) {
    	Vendor vendor = vendorService.getVendorById(id);
        if (vendor != null) {
            return ResponseEntity.ok(vendor);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PostMapping("/send-email")
    public ResponseEntity<String> sendEmail(@RequestBody EmailRequest emailRequest)
//    @RequestParam Long vendorId, @RequestParam String content) 
{
    	Long vendorId = emailRequest.getVendorId();
        String content = emailRequest.getContent();
        Vendor vendor = vendorService.getVendorById(vendorId);
        if (vendor == null) {
            return ResponseEntity.badRequest().body("Vendor not found");
        }

        String email = vendor.getEmail();
        String subject = "Payment Information";

        try {
            String response = emailService.sendEmail(email, subject, content);
            EmailLog emailLog = new EmailLog();
            emailLog.setContent(content);
            emailLog.setVendor(vendor);
            emailLogService.saveEmailLog(emailLog);
            return ResponseEntity.ok(response);
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Error while sending email: " + e.getMessage());
        }
    }
 
    }
